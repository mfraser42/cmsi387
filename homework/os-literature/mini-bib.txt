Mini-Annotated Bibliography
Written by Michael Fraser

The questions for each article:    
1) State its connection to the other work in our small collectionâ€”the connection must be explicit (i.e., cited and overtly discussed in the text). Connections may be to the other work that you find, but at least one must point to something given out in class. 
   
2) State what it does new or differently from the prior cited works. 
    
3) Give a brief assessment of the quality of the work. Consider the authors, the publication venue, the level of detail, references cited, etc.

The articles being annotated/discussed:
# JD: I guess I made an assumption that you'd know to do this---when you are asked for any kind of
#     "bibliography," the expectation is that you provide a full citation of the articles that you
#     list.  You do provide further information in your writeup but really they should all go in
#     this section.
1) Dining Philosophers Revisited, by Armando R. Gingras
2) Dining Philosphers Revisted, Again, by Kwok-Bun Yue # JD: Typos.
3) Process Synchronization and IPC, by Craig E. Wills

 ----- Article 1 -----
1) The Connection:
This article discusses Dijkstra's solution to the dining philosophers problem along with other solutions presented after him. It also discusses the vocabulary of the problem, lists common assumptions, and presents the problem in several ways. The author then presents a solution that is to be answer the dining philosphers problem than that of the previously discussed solutions. 
# JD: ^^^^^^^^^^^^^ Another typo.  You must have been typing faaaaast :)

2) Whats Different:
The author introduces a mechanism called the monitor, and implements such mechanism in a programming language known as Concurrent Euclid. This monitor "is a module that enforces mutually exclusive use of its procedures and data by processes requiring coordination. It manages condition queues wherein delayed processes may wait." This monitor seems to be the controlling agent, which would allow or prevent the philosophers from eating based on the states of the other philosophers. 

A different approach to the problem is explored with the concept of philosophers being "lefties" or "righties." A "lefty" would always look to pick up the left fork first, whereas a "righty" would always look to pick up the right fork first. The author presents theorems based on the inclusion of at least one "lefty" and at least one "righty" philosopher being a part of the problem. Proofs following these theorems show that the case of involving a lefty and righty in the problem prevents starvation and deadlock.

The author then proposes a solution that focuses around the activities of the philosophers themselves rather than the forks. It uses a line mechanism that a philosopher would enter the end of. Once in line, a monitor would take the longest waiting philosopher and check him/her against the eating philosphers to see if a neighbor is eating. If a neighbor is eating, then a different philospher would be considered from the line. If no neighbor is eating, then that philospher could then go and eat when a slot is made available. This solution seems to alter the problem to me, as now it seems the philosophers are allowed to switch table positions with one another. However, the concept of checking if a neighbor is already eating would make this point an unncessary concern, as it can be viewed that the philosophers original seat is inbetween the two empty neighbor seats. 
# JD: OK, should I stop looking for typos at this point?^^^^ They'll just be there huh.

3) The Quality:
Besides the code in Concurrent Euclid being a bit of a challenge to read, I thought the progression of the article was well done. It started with the problem statement, went through definitions, assumptions, and other solutions, and then presented a final solution. ACM did cut off the solution verification and works cited, but that's not the author's fault. There is no abstract though, and that seems to be more and more necessary for formal papers. 

It was published at the Metropolitan State College in Denver, Colorado. I have not heard of this author or the college, but from this paper I'd say both are capable when it comes to discussing the dining philosophers problem. 

 ----- Article 2 -----
1) The Connection:
This article directly responds to that which was presented in Article 1. Much of the code and topics of the first article is presented and discussed in this article. 

2) What's Different:
The author of this article expands on the information of the first article, saying Gingra's (author of the first article) solution to the dining philosopher problem is flawed in a couple ways. The first issue is with the line used by Gingra's in his solution, where the author says multiple philosophers should be allowed to eat at the table and be removed from the line instead of just assuming only one philospher can make it to the table. The author then shows this concept implemented in Concurrent Euclid to match the previous article's code. 

The author also mentions that Gingra's solution does not meet maximal efficiency as was proclaimed, and discusses how maximal efficiency and starvation actually contradict each other. The maximal efficiency may be when the same set of philosophers continue to eat and exclude a philosopher from ever getting to eat. 

Lastly, the author then expands the solution to work with most general cases of mutual exclusion problems.
 
3) The Quality:
The article seemed to maintain the quality level from the first article, and progressed nicely. This article included an abstract, introduction of the problem, and the previous solution. It then went on in detail to discuss the differences of the new proposed solution with the previous solution, and concluded the article nicely.
 
 ----- Article 3 -----
1) The Connection:
The title is Process Synchonization and IPC. Process synchronization, which is what Dijkstra spoke about in his Cooperating Sequential Processes. The author summarizes many different methods or process synchronization.
# JD: Should I...?  Nah nevermind.

2) What's Different:
The author discusses methods of process synchronization beyond what Dijksta spoke of, such as hardward solutions. The one I found interesting was the solution of deactivating cpu switches when a process enters a critical section, preventing other processes becoming active and thus preventing them from getting to the critical section. This does cause all the other processes to hang until the one in the critical section finishes though, which would be inefficient and is more an avoidance of synchronization rather than synchronization. 
# JD: And a few more for good measure.  "hardward" actually sounds somewhat humorous.

The author also discusses IPC, interprocess communication, and from the title I assumed IPC would be used for process synchronization. This is not the case in this article it seems, sadly, as this article merely summarizes the two concepts separately and concludes that combining the two concepts is being done elsewhere.

3) The Quality:
The author does not seem to bring anything unique to the subject area, all the information seems to be brought in from other sources and this article just summarizes that information. Its written well for a summary, but otherwise I was disappointed. I did assume it would delve into a concept of interest rather though, so my expectations were higher going in. 
